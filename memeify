#!/bin/bash

usage(){
	printf "%s\n" "memeify v0.7.2"
	printf "%s\n" "usage: memeify input output [args]"
	printf "%s\n" '-m / --caption "text" "text"  add caption'
	printf "%s\n" '-q / --cubify                 cubify it'
	printf "%s\n" '-d / --deep-fry               deep fry it'
	printf "%s\n" '-l / --liquid-rescale         liquid rescale it'
	printf "%s\n" '-i / --implode                implode it'
	printf "%s\n" '-e / --explode                explode it'
	printf "%s\n" '-s / --swirl                  swirl it'
	printf "%s\n" '-n / --invert                 invert it'
	printf "%s\n" '-r / --rotational-blur        spin it'
	tput cnorm
	exit 1
}

caption(){
	magick "$temp"/temp.png -resize 1024x "$temp"/temp.png   # make sure image is 1024px wide
	if [ -n "$1" ]; then # check if top caption is actually empty
		magick "$temp"/temp.png -size 1024x256 -alpha set -background none -font Impact -stroke black -fill white -strokewidth 2 -gravity north label:"$1" -composite "$temp"/temp.png      # top caption
	fi
	if [ "$#" = 2 ]; then    # check if we're asked for a bottom caption
		if [[ "$2" != -* ]]; then # check if it's actually a flag, just in case :)
			if [ -n "$2" ]; then # check if bottom caption is actually empty
				magick "$temp"/temp.png -size 1024x256 -alpha set -background none -font Impact -stroke black -fill white -strokewidth 2 -gravity south label:"$2" -composite "$temp"/temp.png  # bottom caption
			fi
		fi
	fi
}

cubify(){
	magick "$temp"/temp.png -resize 260x301! -alpha set -background none -shear 0x30  -rotate -60 -trim   "$temp"/top.png     # make the top face
	magick "$temp"/temp.png -resize 260x301! -alpha set -background none -shear 0x30  -level 20%,100%,0.9 "$temp"/left.png    # make the left face
	magick "$temp"/temp.png -resize 260x301! -alpha set -background none -shear 0x-30 -level 30%,100%,0.8 "$temp"/right.png   # make the right face
	magick "$temp"/left.png "$temp"/right.png +append \( "$temp"/top.png -repage +0-149 \) -background none -layers merge +repage "$temp"/temp.png   # combine faces
}

deepfry(){
	magick "$temp"/temp.png -quality 5 -modulate 100,200 -resize 256x -sharpen 10 +noise uniform "$temp"/fried.jpg #delicious deep fried goodness
  magick "$temp"/fried.jpg "$temp"/temp.png # put everything in place
}

lqr(){
	magick "$temp"/temp.png -liquid-rescale 50x50%\! "$temp"/temp.png 
}

implode(){
	magick "$temp"/temp.png -implode 0.5 "$temp"/temp.png 
}

explode(){
	magick "$temp"/temp.png -implode -1 "$temp"/temp.png 
}

swirl(){
	magick "$temp"/temp.png -swirl 180 "$temp"/temp.png
}

invert(){
	magick "$temp"/temp.png -channel RGB -negate "$temp"/temp.png 
}

rblur(){
	magick "$temp"/temp.png -rotational-blur 10 "$temp"/temp.png
}

barge(){
	pchr="#" # positive character
	nchr="." # negative character

	tlen="$1" # total length
	perc="$2" # percentage
	unset pbar nbar # prevent problems if script is ran repeatedly

	plen=$(( $(( perc * tlen )) / 100)) # get positive length
	nlen=$(( tlen - plen )) # get negative length 

	while [ "$plen" -ne 0 ]; do # add pchr to pbar plen times
		pbar="$pbar""$pchr"	
		plen=$(( "$plen" - 1 )) 
	done

	while [ "$nlen" -ne 0 ]; do # add nchr to nbar nlen times
		nbar="$nbar""$nchr"
		nlen=$(( "$nlen" - 1 ))
	done

	printf "%s" "$pbar" # print pbar
	printf "%s" "$nbar" # print nbar
}

if [[ ${#} -eq 0 ]]; then # if no args present...
  usage # ...show usage
fi

if [ "$1" = "--help" ]; then # if user asks nicely...
	usage # ...show usage
fi

if [[ "$1" = -* ]]; then
	echo "Missing filename, panicking..."
	tput cnorm
	exit 1
fi

trap "tput cnorm; exit" INT TERM # show cursor when script is killed
tput civis # hide cursor during script execution

temp=$(mktemp -d)     # make temporary directory
magick "$1" "$temp"/temp.png # create temp file

out="$1"
shift
if [[ $1 != -* ]]; then # check if they asked for an output file or if they went straight to args
	out="$1"
	shift
fi

while [ "$1" != "" ]; do # check if we have any args left
	case "$1" in
		--*)
			case "${1#--}" in
				caption)
					if [[ $3 != -* ]]; then
						cstr="$cstrðŸ¯…caption \"$2\" \"$3\""
						shift
					else
						cstr="$cstrðŸ¯…caption \"$2\""
					fi
					shift
				;;
				cubify)
					cstr="$cstrðŸ¯…cubify"
				;;
				deep-fry)
					cstr="$cstrðŸ¯…deepfry"
				;;
				liquid-rescale)
					cstr="$cstrðŸ¯…lqr"
				;;
				implode)
					cstr="$cstrðŸ¯…implode"
				;;
				explode)
					cstr="$cstrðŸ¯…explode"
				;;
				swirl)
					cstr="$cstrðŸ¯…swirl"
				;;
				invert)
					cstr="$cstrðŸ¯…invert"
				;;
				rotational-blur)
					cstr="$cstrðŸ¯…rblur"
				;;
				*)
					printf "%s\n" "Invalid flag, panicking..."
					tput cnorm
					exit 1
				;;
			esac
		;;
		-*)
			sflg="${1#-}"
			while [ "$sflg" != "" ]; do
				case "$sflg" in
					m*)
						if [[ $3 != -* ]]; then
							cstr="$cstrðŸ¯…caption \"$2\" \"$3\""
							shift
						else
							cstr="$cstrðŸ¯…caption \"$2\""
						fi
						shift
					;;
					q*)
						cstr="$cstrðŸ¯…cubify"
					;;
					d*)
						cstr="$cstrðŸ¯…deepfry"
					;;
					l*)
						cstr="$cstrðŸ¯…lqr"
					;;
					i*)
						cstr="$cstrðŸ¯…implode"
					;;
					e*)
						cstr="$cstrðŸ¯…explode"
					;;
					s*)
						cstr="$cstrðŸ¯…swirl"
					;;
					n*)
						cstr="$cstrðŸ¯…invert"
					;;
					r*)
						cstr="$cstrðŸ¯…rblur"
					;;
					*)
						printf "%s\n" "Invalid flag, panicking..."
						tput cnorm
						exit 1
					;;
				esac
				sflg=${sflg:1} # cringe bashism
			done
		;;
	esac
	shift # go to next argument
done

cstr="${cstr#ðŸ¯…}ðŸ¯…" # sorry
clen="${cstr//[^ðŸ¯…]}" # remove everything that isn't a stickman
clen="${#clen}" # count the boys

printf "%s\n" "Memeifying..."

printf "[" # progress bar setup
barge 20 0
printf "] %s%%\r[" "0"

while [ "$cstr" != "" ]; do
	pcnt=$(( $(( cpos * 100 )) / clen )) # turn that into percentage
	barge 20 "$pcnt" # display bar
	printf "] %s%%\r[" "$pcnt" #display percentage and errata
	eval "${cstr%%ðŸ¯…*}" # run next command
	cpos=$(( cpos + 1)) # update bar position for later
	cstr=${cstr#*ðŸ¯…*} # remove the command we just ran
done

barge 20 100 # generate final bar
printf "] %s\n%s\n" "100%" "Memeification complete!" # finish everything off

magick "$temp"/temp.png "$out" #output file
rm -r "$temp"   #remove temporary directory
tput cnorm # give cursor back
